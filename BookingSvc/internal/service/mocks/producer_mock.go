// Code generated by MockGen. DO NOT EDIT.
// Source: producer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageProducer is a mock of MessageProducer interface.
type MockMessageProducer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProducerMockRecorder
}

// MockMessageProducerMockRecorder is the mock recorder for MockMessageProducer.
type MockMessageProducerMockRecorder struct {
	mock *MockMessageProducer
}

// NewMockMessageProducer creates a new mock instance.
func NewMockMessageProducer(ctrl *gomock.Controller) *MockMessageProducer {
	mock := &MockMessageProducer{ctrl: ctrl}
	mock.recorder = &MockMessageProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProducer) EXPECT() *MockMessageProducerMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageProducer) SendMessage(ctx context.Context, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageProducerMockRecorder) SendMessage(ctx, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageProducer)(nil).SendMessage), ctx, value)
}
