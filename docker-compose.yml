services:
  booking-service:
    build:
      context: ./BookingSvc
      dockerfile: Dockerfile
    env_file:
      - .env # Указываем путь к .env для этого сервиса    ports:
    ports:
      - "${BOOKING_HTTP_PORT}:${BOOKING_HTTP_PORT}"
      - "${BOOKING_GRPC_PORT}:${BOOKING_GRPC_PORT}"
    depends_on:
      booking-db:
          condition: service_healthy
    networks:
      - app-network
  booking-db:
    image: postgres:15
    container_name: booking-db
    env_file:
      - .env # Указываем путь к .env для этого сервиса    ports:
    ports:
      - "5432:${BOOKING_DB_PORT}"
    environment:
      POSTGRES_USER: ${BOOKING_DB_USER}
      POSTGRES_PASSWORD: ${BOOKING_DB_PASSWORD}
      POSTGRES_DB: ${BOOKING_DB_NAME}
    volumes:
      - booking-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - app-network
  hotel-service:
    build:
      context: ./HotelSvc
      dockerfile: Dockerfile
    ports:
      - "${HOTEL_HTTP_PORT}:${HOTEL_HTTP_PORT}"
      - "50052:${HOTEL_GRPC_PORT}"
    env_file:
      - .env
    depends_on:
      hotel-db:
        condition: service_healthy
    networks:
      - app-network

  hotel-db:
    image: postgres:15
    container_name: hotel-db
    env_file:
      - .env
    ports:
      - "5433:${HOTEL_DB_PORT}"
    environment:
      POSTGRES_USER: ${HOTEL_DB_USER}
      POSTGRES_PASSWORD: ${HOTEL_DB_PASSWORD}
      POSTGRES_DB: ${HOTEL_DB_NAME}
    volumes:
      - hotel-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${HOTEL_DB_USER}" ]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - app-network
volumes:
  booking-db-data:
  hotel-db-data:

networks:
  app-network:
    driver: bridge
